function [datain, headers] = load_findata(filename, dataLines, commodity, contract_no, timescale)
%IMPORTFILE Import data from a text file
%  CORNPOSTPROCPRICEVOLDAILYZC1 = IMPORTFILE(FILENAME) reads data from
%  text file FILENAME for the default selection.  Returns the data as a
%  table.
%
%  CORNPOSTPROCPRICEVOLDAILYZC1 = IMPORTFILE(FILE, DATALINES) reads data
%  for the specified row interval(s) of text file FILENAME. Specify
%  DATALINES as a positive scalar integer or a N-by-2 array of positive
%  scalar integers for dis-contiguous row intervals.
%
%  Example:
%  cornpostprocpriceVoldailyZC1 = importfile("./cbot_data/corn_postproc_priceVol_daily_ZC1.csv", [1, Inf]);
%
%  See also READTABLE.
%
% Auto-generated by MATLAB on 01-Jul-2022 15:22:27

%% Input handling

% contract_no : front/second 

% If dataLines is not specified, define defaults
if nargin < 2
    dataLines = [2, Inf];
end

%% Set up the Import Options and import the data
if commodity == "corn"
    opts = delimitedTextImportOptions("NumVariables", 14);
elseif commodity == "wheat"
    opts = delimitedTextImportOptions("NumVariables", 17);
end

% Specify range and delimiter
opts.DataLines = dataLines;
opts.Delimiter = ",";

% Specify column names and types
if commodity == "corn"
    opts.VariableNames = ["timestamp", strcat(commodity,"_",contract_no,"contractRaw_", timescale), strcat(commodity,"_",contract_no,"contractLogRet_", timescale), strcat(commodity,"_tradedvolmedian7",contract_no,"contract_", timescale), strcat(commodity,"_parkinsonVolatility_", timescale), strcat(commodity,"_logretVolatility100_", timescale), strcat(commodity,"_logretVolatility7_", timescale), "CP", "CPSS", "ACR", "PP", "CPAS", "GS", "WASDE"];
    opts.VariableTypes = ["datetime", "double", "double", "double", "double", "double", "double", "int8", "int8", "int8", "int8", "int8", "int8", "int8"];
elseif commodity == "wheat"
    opts.VariableNames = ["timestamp", strcat(commodity,"_",contract_no,"contractRaw_", timescale), strcat(commodity,"_",contract_no,"contractLogRet_", timescale), strcat(commodity,"_tradedvolmedian7",contract_no,"contract_", timescale), strcat(commodity,"_parkinsonVolatility_", timescale), strcat(commodity,"_logretVolatility100_", timescale), strcat(commodity,"_logretVolatility7_", timescale), "CP", "CPSS", "ACR", "PP", "CPAS", "GS", "WASDE", "SGAS", "WWS", "CPM"];
    opts.VariableTypes = ["datetime", "double", "double", "double", "double", "double", "double", "int8", "int8", "int8", "int8", "int8", "int8", "int8", "int8", "int8", "int8"];
end        
   

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Specify variable properties
opts = setvaropts(opts, "timestamp", "InputFormat", "yyyy-MM-dd HH:mm:ss");
opts = setvaropts(opts, [strcat(commodity,"_",contract_no,"contractRaw_", timescale), strcat(commodity,"_",contract_no,"contractLogRet_",timescale), strcat(commodity,"_tradedvolmedian7",contract_no,"contract_", timescale)], "TrimNonNumeric", true);
if commodity == "corn"
    opts = setvaropts(opts, [strcat(commodity,"_",contract_no,"contractRaw_",timescale), strcat(commodity,"_",contract_no,"contractLogRet_", timescale), strcat(commodity,"_tradedvolmedian7",contract_no,"contract_",timescale), strcat(commodity,"_parkinsonVolatility_", timescale), strcat(commodity,"_logretVolatility100_", timescale), strcat(commodity,"_logretVolatility7_", timescale), "CP", "CPSS", "ACR", "PP", "CPAS", "GS", "WASDE"], "DecimalSeparator", ".");
elseif commodity == "wheat"
    opts = setvaropts(opts, [strcat(commodity,"_",contract_no,"contractRaw_",timescale), strcat(commodity,"_",contract_no,"contractLogRet_", timescale), strcat(commodity,"_tradedvolmedian7",contract_no,"contract_",timescale), strcat(commodity,"_parkinsonVolatility_", timescale), strcat(commodity,"_logretVolatility100_", timescale), strcat(commodity,"_logretVolatility7_", timescale), "CP", "CPSS", "ACR", "PP", "CPAS", "GS", "WASDE", "SGAS", "WWS", "CPM"], "DecimalSeparator", ".");
end    

% Import the data
datain = readtable(filename, opts);
headers = opts.VariableNames;

end